package com.aerozhonghuan.driverapp.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aerozhonghuan.hongyan.producer.dao.beans.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Phone = new Property(2, String.class, "phone", false, "phone");
        public final static Property Role = new Property(3, int.class, "role", false, "role");
        public final static Property IdentityCard = new Property(4, String.class, "identityCard", false, "identityCard");
        public final static Property DrivingLicense = new Property(5, String.class, "drivingLicense", false, "drivingLicense");
        public final static Property DrivingLicenseString = new Property(6, String.class, "drivingLicenseString", false, "drivingLicenseString");
        public final static Property CarNo = new Property(7, String.class, "carNo", false, "carNo");
        public final static Property TeamName = new Property(8, String.class, "teamName", false, "teamName");
        public final static Property TeamId = new Property(9, String.class, "teamId", false, "teamId");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"phone\" TEXT," + // 2: phone
                "\"role\" INTEGER NOT NULL ," + // 3: role
                "\"identityCard\" TEXT," + // 4: identityCard
                "\"drivingLicense\" TEXT," + // 5: drivingLicense
                "\"drivingLicenseString\" TEXT," + // 6: drivingLicenseString
                "\"carNo\" TEXT," + // 7: carNo
                "\"teamName\" TEXT," + // 8: teamName
                "\"teamId\" TEXT);"); // 9: teamId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getRole());
 
        String identityCard = entity.getIdentityCard();
        if (identityCard != null) {
            stmt.bindString(5, identityCard);
        }
 
        String drivingLicense = entity.getDrivingLicense();
        if (drivingLicense != null) {
            stmt.bindString(6, drivingLicense);
        }
 
        String drivingLicenseString = entity.getDrivingLicenseString();
        if (drivingLicenseString != null) {
            stmt.bindString(7, drivingLicenseString);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(8, carNo);
        }
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(9, teamName);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(10, teamId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getRole());
 
        String identityCard = entity.getIdentityCard();
        if (identityCard != null) {
            stmt.bindString(5, identityCard);
        }
 
        String drivingLicense = entity.getDrivingLicense();
        if (drivingLicense != null) {
            stmt.bindString(6, drivingLicense);
        }
 
        String drivingLicenseString = entity.getDrivingLicenseString();
        if (drivingLicenseString != null) {
            stmt.bindString(7, drivingLicenseString);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(8, carNo);
        }
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(9, teamName);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(10, teamId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.getInt(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // identityCard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // drivingLicense
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // drivingLicenseString
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // carNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // teamName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // teamId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRole(cursor.getInt(offset + 3));
        entity.setIdentityCard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDrivingLicense(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDrivingLicenseString(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCarNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTeamName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTeamId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
